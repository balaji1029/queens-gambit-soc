float evaluate(Board& board) 
{
        float diff = 0;
        float wEval = 0, bEval = 0;
        int whiteNumber = 0, blackNumber = 0; //this is not meant as a racist comment, its chess
        int P= 0, p = 0;
        int R=0,r=0;
        int N=0,n=0;
        int B = 0, b = 0;
        int Q=0,q=0;
        int K = 0, k = 0;

        const float piece_values[6] = {1.0, 3.0, 3.25, 5.0, 9.0, 2.0}; // Values for pawn, knight, bishop, rook, queen, king

        const array<int, 64> pawns = {
            0,   0,   0,   0,   0,   0,   0,   0,
            20,  50,  40,  20,  20,  40,  50,  20,
            30,  10,  20,  25,  25,  20,  10,  30,
            5,   5,   10,  40,  40,  10,  5,   5,
            0,   0,   0,   20,  20,  0,   0,   0,
            5,   5,   10,  0,   0,   10,  5,   5,
            50,  50,  50,  50,  50,  50,  50,  50,
            0,   0,   0,   0,   0,   0,   0,   0
        };

        const array<int, 64> pawnsEnd={
            0, 0, 0, 0, 0, 0, 0, 0,
            10, 10, 10, 10, 10, 10, 10, 10,
            10, 10, 10, 10, 10, 10, 10, 10,
            20, 20, 20, 20, 20, 20, 20, 20,
            30, 30, 30, 30, 30, 30, 30, 30,
            50, 50, 50, 50, 50, 50, 50, 50,
            80, 80, 80, 80, 80, 80, 80, 80,
            0, 0, 0, 0, 0, 0, 0, 0
        };
    
        const array<int, 64> knights_util = {
            -50,-40,-30,-30,-30,-30,-40,-50,
			-40,-20,  0,  0,  0,  0,-20,-40,
			-30,  0, 10, 15, 15, 10,  0,-30,
			-30,  5, 15, 20, 20, 15,  5,-30,
			-30,  0, 15, 20, 20, 15,  0,-30,
			-30,  5, 10, 15, 15, 10,  5,-30,
			-40,-20,  0,  5,  5,  0,-20,-40,
			-50,-40,-30,-30,-30,-30,-40,-50
        };
        
        const array<int, 64> bishops_util = {
            -20.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -20.0, 
            -10.0, 5.0, 0.0, 0.0, 0.0, 0.0, 5.0, -10.0, 
            -10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, -10.0, 
            -10.0, 0.0, 10.0, 10.0, 10.0, 10.0, 0.0, -10.0, 
            -10.0, 5.0, 5.0, 10.0, 10.0, 5.0, 5.0, -10.0, 
            -10.0, 0.0, 5.0, 10.0, 10.0, 5.0, 0.0, -10.0, 
            -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -10.0, 
            -20.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -20.0
        };
        
        const array<int, 64> rooks_util = {
            0.0, 0.0, 0.0, 5.0, 5.0, 0.0, 0.0, 0.0, 
            -5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0, 
            -5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0, 
            -5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0, 
            -5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0, 
            -5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0, 
            5.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 5.0, 
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 
        };
    
        const array<int, 64> queens_util = {
            -20,-10,-10, -5, -5,-10,-10,-20,
			-10,  0,  0,  0,  0,  0,  0,-10,
			-10,  0,  5,  5,  5,  5,  0,-10,
			-5,   0,  5,  5,  5,  5,  0, -5,
			0,    0,  5,  5,  5,  5,  0, -5,
			-10,  5,  5,  5,  5,  5,  0,-10,
			-10,  0,  5,  0,  0,  0,  0,-10,
			-20,-10,-10, -5, -5,-10,-10,-20
        };

        const array<int, 64> kings_start_util = {
            -80, -70, -70, -70, -70, -70, -70, -80,
			-60, -60, -60, -60, -60, -60, -60, -60,
			-40, -50, -50, -60, -60, -50, -50, -40,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-20, -30, -30, -40, -40, -30, -30, -20,
			-10, -20, -20, -20, -20, -20, -20, -10,
			20,  20,  -5,  -5,  -5,  -5,  20,  20, 
			20,  30,  10,   0,   0,  10,  30,  20
        };

        const array<int, 64> kings_end_util = {
            -20, -10, -10, -10, -10, -10, -10, -20,
			-5,   0,   5,   5,   5,   5,   0,  -5,
			-10, -5,   20,  30,  30,  20,  -5, -10,
			-15, -10,  35,  45,  45,  35, -10, -15,
			-20, -15,  30,  40,  40,  30, -15, -20,
			-25, -20,  20,  25,  25,  20, -20, -25,
			-30, -25,   0,   0,   0,   0, -25, -30,
			-50, -30, -30, -30, -30, -30, -30, -50
        };

    const array<const array<float, 64>, 6> piece_util = {{}, knights_util, bishops_util, rooks_util, queens_util, {}};

    for (int i = 0; i < 64; ++i) {
        int piece = board.at(i);
        if (piece != 12) {
            if (piece < 6) 
            { 
                whiteNumber++;
                if (piece!=5)
                {
                    wEval += piece_values[piece] + piece_util[piece][i] / 100.0;
                }
                if (piece == 0) P++;
                else if (piece==1) N++;
                else if (piece == 2) B++;
                else if (piece==3) R++;
                else if (piece==4) Q++;
                else if (piece == 5) K = i;
            } 
            else 
            { 
                blackNumber++;
                if (piece!=5)
                {
                    bEval += piece_values[piece] + piece_util[piece][i] / 100.0;
                }
                if (piece == 6) p++;
                else if (piece==7) n++;
                else if (piece == 8) b++;
                else if (piece==9) r++;
                else if (piece==10) q++;
                else if (piece == 11) k = 63-i;
            }
        }
    }

    const int* pawnUtil = (whiteNumber + blackNumber > 10) ? pawns.data() : pawnsEnd.data();
    const int* kingUtil = (whiteNumber + blackNumber > 8) ? kings_start_util.data() : kings_end_util.data();

    wEval += kingUtil[K] / 100.0;
    bEval += kingUtil[k] / 100.0;

    if (B >= 2 || N>=2 || R>=2) wEval += 1;
    if (b >= 2 || n>=2 || r>=2) bEval += 1;

    if (Q >=1) wEval+=5;
    if (q>=1) bEval+=5;

    diff = wEval - bEval;
    return diff;
}